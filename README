# Запуск проекта Task Management API

Этот документ содержит инструкции для запуска проекта с использованием Docker.

## Структура проекта

Для полноценной работы с Docker, проект должен иметь следующую структуру директорий:

```
task-management-api/
├── docker/
│   ├── nginx/
│   │   └── default.conf
│   └── php/
│       ├── Dockerfile
│       └── php.ini
├── src/
│   ├── Controller/
│   │   └── TaskController.php
│   ├── Entity/
│   │   └── Task.php
│   └── ...
├── .env
├── docker-compose.yml
└── ...
```

## Подготовка проекта

1. Создайте необходимые директории для Docker файлов:

```bash
mkdir -p docker/nginx docker/php
```

2. Скопируйте файлы конфигурации в соответствующие директории:

- Создайте файл `docker/nginx/default.conf`
- Создайте файл `docker/php/Dockerfile`
- Создайте файл `docker/php/php.ini`

3. Скопируйте файл `docker-compose.yml` в корень проекта

## Запуск проекта

1. Соберите и запустите контейнеры:

```bash
docker-compose up -d --build
```

2. Войдите в контейнер PHP для установки зависимостей:

```bash
docker-compose exec app bash
```

3. Внутри контейнера выполните:

```bash
composer install
```

4. Создайте базу данных и выполните миграции:

```bash
php bin/console doctrine:database:create
php bin/console doctrine:migrations:migrate
```

5. (Опционально) Загрузите тестовые данные:

```bash
php bin/console doctrine:fixtures:load
```

## Доступ к проекту

После запуска, приложение будет доступно по адресу:
- http://localhost:8080

База данных PostgreSQL будет доступна по следующим параметрам:
- Хост: localhost
- Порт: 5432
- База данных: task_management
- Пользователь: postgres
- Пароль: postgres

## Остановка проекта

Для остановки контейнеров выполните:

```bash
docker-compose down
```

Для остановки контейнеров и удаления томов (данные базы данных будут потеряны):

```bash
docker-compose down -v
```